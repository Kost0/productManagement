// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_GetRemains_FullMethodName     = "/inventory.InventoryService/GetRemains"
	InventoryService_GetListRemains_FullMethodName = "/inventory.InventoryService/GetListRemains"
	InventoryService_CreateRemain_FullMethodName   = "/inventory.InventoryService/CreateRemain"
	InventoryService_DeleteRemain_FullMethodName   = "/inventory.InventoryService/DeleteRemain"
	InventoryService_GiveToOrder_FullMethodName    = "/inventory.InventoryService/GiveToOrder"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	GetRemains(ctx context.Context, in *RemainRequest, opts ...grpc.CallOption) (*RemainResponse, error)
	GetListRemains(ctx context.Context, in *ListRemainsRequest, opts ...grpc.CallOption) (*ListRemainsResponse, error)
	CreateRemain(ctx context.Context, in *CreateRemainRequest, opts ...grpc.CallOption) (*RemainResponse, error)
	DeleteRemain(ctx context.Context, in *RemainRequest, opts ...grpc.CallOption) (*DeleteRemainResponse, error)
	GiveToOrder(ctx context.Context, in *UpdateRemainRequest, opts ...grpc.CallOption) (*RemainResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetRemains(ctx context.Context, in *RemainRequest, opts ...grpc.CallOption) (*RemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemainResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetRemains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetListRemains(ctx context.Context, in *ListRemainsRequest, opts ...grpc.CallOption) (*ListRemainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRemainsResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetListRemains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateRemain(ctx context.Context, in *CreateRemainRequest, opts ...grpc.CallOption) (*RemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemainResponse)
	err := c.cc.Invoke(ctx, InventoryService_CreateRemain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteRemain(ctx context.Context, in *RemainRequest, opts ...grpc.CallOption) (*DeleteRemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRemainResponse)
	err := c.cc.Invoke(ctx, InventoryService_DeleteRemain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GiveToOrder(ctx context.Context, in *UpdateRemainRequest, opts ...grpc.CallOption) (*RemainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemainResponse)
	err := c.cc.Invoke(ctx, InventoryService_GiveToOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	GetRemains(context.Context, *RemainRequest) (*RemainResponse, error)
	GetListRemains(context.Context, *ListRemainsRequest) (*ListRemainsResponse, error)
	CreateRemain(context.Context, *CreateRemainRequest) (*RemainResponse, error)
	DeleteRemain(context.Context, *RemainRequest) (*DeleteRemainResponse, error)
	GiveToOrder(context.Context, *UpdateRemainRequest) (*RemainResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) GetRemains(context.Context, *RemainRequest) (*RemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemains not implemented")
}
func (UnimplementedInventoryServiceServer) GetListRemains(context.Context, *ListRemainsRequest) (*ListRemainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListRemains not implemented")
}
func (UnimplementedInventoryServiceServer) CreateRemain(context.Context, *CreateRemainRequest) (*RemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemain not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteRemain(context.Context, *RemainRequest) (*DeleteRemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemain not implemented")
}
func (UnimplementedInventoryServiceServer) GiveToOrder(context.Context, *UpdateRemainRequest) (*RemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveToOrder not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_GetRemains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetRemains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetRemains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetRemains(ctx, req.(*RemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetListRemains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetListRemains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetListRemains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetListRemains(ctx, req.(*ListRemainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateRemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateRemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_CreateRemain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateRemain(ctx, req.(*CreateRemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteRemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteRemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_DeleteRemain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteRemain(ctx, req.(*RemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GiveToOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GiveToOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GiveToOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GiveToOrder(ctx, req.(*UpdateRemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRemains",
			Handler:    _InventoryService_GetRemains_Handler,
		},
		{
			MethodName: "GetListRemains",
			Handler:    _InventoryService_GetListRemains_Handler,
		},
		{
			MethodName: "CreateRemain",
			Handler:    _InventoryService_CreateRemain_Handler,
		},
		{
			MethodName: "DeleteRemain",
			Handler:    _InventoryService_DeleteRemain_Handler,
		},
		{
			MethodName: "GiveToOrder",
			Handler:    _InventoryService_GiveToOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/inventory.proto",
}
